{"version":3,"names":["axios","clone","isEqual","noop","Network","NetInfo","StorageService","EventNotifier","getAbortableDefer","isWebPreviewMode","retryIfFails","NetworkState","constructor","_defineProperty","AUTO_CONNECT_KEY","IS_CONNECTED_KEY","excludedList","RegExp","networkState","blockUrl","url","isConnected","startsWith","findIndex","regExp","test","interceptors","request","use","noServiceRequired","urlSplits","split","pathIndex","indexOf","substr","join","NetworkService","setAutoConnect","checkForNetworkStateChange","isConnecting","connect","silent","arguments","length","undefined","tryToConnect","disconnect","p","tryToDisconnect","disableAutoConnect","isAvailable","pingServer","isServiceAvailable","then","onConnect","defer","cancelSubscription","Promise","resolve","notifier","subscribe","promise","catch","retryIfNetworkFails","fn","onConnectPromise","abort","reject","start","appConfig","getItem","_autoConnect","state","getNetworkStateAsync","isNetworkAvailable","addEventListener","data","_isCheckingServer","checkForServiceAvailiblity","getServiceName","SERVICE_NAME","unblock","urlRegex","push","getState","_lastKnownNetworkState","notify","maxTimeout","intervalId","setInterval","available","clearInterval","response","baseURL","endsWith","get","Date","now","responseType","timeout","res","status","flag","setItem","silentMode","setTimeout"],"sources":["network.service.ts"],"sourcesContent":["import axios from 'axios';\nimport { clone, isEqual, noop } from 'lodash-es';\nimport * as Network from 'expo-network';\nimport NetInfo from '@react-native-community/netinfo';\n\nimport AppConfig from './AppConfig';\nimport StorageService from './storage.service';\nimport EventNotifier from './event-notifier';\nimport { getAbortableDefer, isWebPreviewMode, retryIfFails } from './utils';\n\nexport class NetworkState {\n    isConnecting = false;\n    isConnected = true;\n    isNetworkAvailable = true;\n    isServiceAvailable = true;\n    noServiceRequired = false;\n}\n\nconst AUTO_CONNECT_KEY = 'WM.NetworkService._autoConnect',\n    IS_CONNECTED_KEY = 'WM.NetworkService.isConnected',\n    excludedList = [new RegExp('/wmProperties.js')],\n    networkState = new NetworkState();\n\n/**\n * If server is not connected and url does not match the unblock list of regular expressions,\n * then this function return true. Otherwise, return false.\n * @param url\n * @returns {boolean}\n */\nconst blockUrl = (url: string) => {\n    return !networkState.isConnected\n        && url.startsWith('http')\n        && excludedList.findIndex(regExp => regExp.test(url)) < 0;\n};\n\naxios.interceptors.request.use((request) => {\n    if (!networkState.noServiceRequired && request.url && blockUrl(request.url)) {\n        const url = request.url;\n        const urlSplits = url.split('://');\n        const pathIndex = urlSplits[1].indexOf('/');\n        urlSplits[1] = 'localhost' + (pathIndex > 0 ? urlSplits[1].substr(pathIndex) : '/');\n        request.url = urlSplits.join('://');\n    }\n    return request;\n});\n\nclass NetworkService {\n    static readonly SERVICE_NAME = 'NetworkService';\n\n    private _autoConnect = true;\n    private _lastKnownNetworkState: any;\n    private _isCheckingServer = false;\n    private appConfig: AppConfig = null as any;\n    public readonly notifier: EventNotifier = new EventNotifier();\n\n    constructor() {}\n\n    /**\n     * This method attempts to connect app to the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result.\n     *\n     * @returns {object} promise\n     */\n    public connect(silent = false): Promise<boolean> {\n        this.setAutoConnect(true);\n        return this.tryToConnect(silent);\n    }\n\n    /**\n     * When the auto connect is enabled, then app is automatically connected  whenever server is available.\n     * Every time when app goes offline, auto connect is enabled. Before app coming to online, one can disable\n     * the auto connection flow using this method.\n     */\n    public disableAutoConnect = () => this.setAutoConnect(false);\n\n    /**\n     * This method disconnects the app from the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result. Use connect method to reconnect.\n     *\n     * @returns {object} promise\n     */\n    public disconnect(): Promise<boolean> {\n        const p = this.tryToDisconnect();\n        this.disableAutoConnect();\n        return p;\n    }\n\n    /**\n     * If pingServer is true, then it returns a promise that will be resolved with boolean based on service availability\n     * check.If pingServer is false, returns a boolean value based on the last known service availability.\n     *\n     * @returns {boolean} if pingServer is true, then a promise is returned. Otherwise, a boolean value.\n     */\n    public isAvailable(pingServer = false): boolean | Promise<boolean> {\n        if (pingServer) {\n            return this.isServiceAvailable().then(() => {\n                this.checkForNetworkStateChange();\n                return networkState.isServiceAvailable;\n            });\n        }\n        return networkState.isServiceAvailable;\n    }\n\n    /**\n     * Returns true, if app is connected to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true, if app is connected to server. Otherwise, returns false.\n     */\n    public isConnected = () => {\n        this.checkForNetworkStateChange();\n        return networkState.isConnected;\n    }\n\n    /**\n     * Returns true if app is trying to connect to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true if app is trying to connect to server. Otherwise, returns false.\n     */\n    public isConnecting = () => networkState.isConnecting;\n\n    /**\n     * This method returns a promise that is resolved when connection is established with server.\n     *\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public onConnect() {\n        let defer = getAbortableDefer(),\n            cancelSubscription: Function;\n        if (this.isConnected()) {\n            return Promise.resolve();\n        }\n        cancelSubscription = this.notifier.subscribe('onNetworkStateChange', () => {\n            if (this.isConnected()) {\n                defer.resolve(true);\n                cancelSubscription();\n            }\n        });\n        defer.promise.catch(function () {\n            cancelSubscription();\n        });\n        return defer.promise;\n    }\n\n    /**\n     * This is a util method. If fn cannot execute successfully and network lost connection, then the fn will\n     * be invoked when network is back. The returned can also be aborted.\n     *\n     * @param {function()} fn method to invoke.\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public retryIfNetworkFails(fn: Function) {\n        const defer = getAbortableDefer();\n        retryIfFails(fn, 0, 0, () => {\n            let onConnectPromise: any;\n            if (!this.isConnected()) {\n                onConnectPromise = this.onConnect();\n                defer.promise.catch(function () {\n                    onConnectPromise.abort();\n                });\n                return onConnectPromise;\n            }\n            return false;\n        }).then(defer.resolve, defer.reject);\n        return defer.promise;\n    }\n\n    public async start(appConfig: AppConfig): Promise<any> {\n        this.appConfig = appConfig;\n        networkState.noServiceRequired = !appConfig.url;\n        networkState.isConnected = (await StorageService.getItem(IS_CONNECTED_KEY)) === 'true';\n        this._autoConnect = (await StorageService.getItem(AUTO_CONNECT_KEY)) !== 'false';\n        const state = await Network.getNetworkStateAsync();\n        networkState.isNetworkAvailable = !!state.isConnected;\n        networkState.isConnected = networkState.isNetworkAvailable && networkState.isConnected;\n        !isWebPreviewMode() && NetInfo.addEventListener(state => {\n            if (state.isConnected !== networkState.isConnected) {\n                if (state.isConnected) {\n                    networkState.isNetworkAvailable = !!state.isConnected;\n                    this.tryToConnect().catch(noop);\n                } else {\n                    networkState.isNetworkAvailable = false;\n                    networkState.isServiceAvailable = false;\n                    networkState.isConnected = false;\n                    this.tryToDisconnect();\n                }\n            }\n        });\n        this.notifier.subscribe('onNetworkStateChange', (data: NetworkState) => {\n            /**\n             * If network is available and server is not available,then\n             * try to connect when server is available.\n             */\n            if (data.isNetworkAvailable && !data.isServiceAvailable && !this._isCheckingServer && !data.noServiceRequired) {\n                this._isCheckingServer = true;\n                this.checkForServiceAvailiblity().then(() => {\n                    this._isCheckingServer = false;\n                    this.connect();\n                }, () => {\n                    this._isCheckingServer = false;\n                });\n            }\n        });\n        // to set the default n/w connection values.\n        return this.tryToConnect(true).catch(noop);\n    }\n\n    public getServiceName() {\n        return NetworkService.SERVICE_NAME;\n    }\n\n    /**\n     * This function adds the given regular expression to the unblockList. Even app is in offline mode,\n     * the urls matching with the given regular expression are not blocked by NetworkService.\n     *\n     * @param {string} urlRegex regular expression\n     */\n    public unblock(urlRegex: string) {\n        excludedList.push(new RegExp(urlRegex));\n    }\n\n    public getState() {\n        return clone(networkState);\n    }\n\n    private checkForNetworkStateChange() {\n        if (!isEqual(this._lastKnownNetworkState, networkState)) {\n            this._lastKnownNetworkState = clone(networkState);\n            this.notifier.notify('onNetworkStateChange', [this._lastKnownNetworkState]);\n        }\n    }\n\n    /**\n     * Returns a promise that is resolved when server is available.\n     * @returns {*}\n     */\n    private checkForServiceAvailiblity(): Promise<void> {\n        const maxTimeout = 4500;\n        return new Promise<void>(resolve => {\n            const intervalId = setInterval(() => {\n                if (networkState.isNetworkAvailable) {\n                    this.isServiceAvailable(maxTimeout).then(available => {\n                        if (available) {\n                            clearInterval(intervalId);\n                            resolve();\n                        }\n                    });\n                }\n            }, 5000);\n        });\n    }\n\n    /**\n     * Pings server to check whether server is available. Based on ping response network state is modified.\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     */\n    private isServiceAvailable(maxTimeout?: number): Promise<boolean> {\n        if (networkState.noServiceRequired) {\n            networkState.isServiceAvailable = false;\n            networkState.noServiceRequired = true;\n            return Promise.resolve(false);\n        }\n        return this.pingServer(maxTimeout).then(response => {\n            networkState.isServiceAvailable = response;\n            if (!networkState.isServiceAvailable) {\n                networkState.isConnecting = false;\n                networkState.isConnected = false;\n            }\n            return response;\n        });\n    }\n\n    /**\n     * Pings server\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     * default timeout value is 1min.\n     */\n    private pingServer(maxTimeout = 60000): Promise<boolean> {\n        let baseURL = this.appConfig.url;\n        if (baseURL && !baseURL.endsWith('/')) {\n            baseURL += '/';\n        } else {\n            baseURL = baseURL || '';\n        }\n        return axios.get(baseURL + 'services/application/wmProperties.js?t=' + Date.now(), {\n            responseType: 'text',\n            timeout: maxTimeout\n        }).then((res) => res.status === 200, () => false);\n    }\n\n    private setAutoConnect(flag: boolean): void {\n        this._autoConnect = flag;\n        StorageService.setItem(AUTO_CONNECT_KEY, '' + flag);\n    }\n\n    /**\n     * Tries to connect to remote server. Network State will be changed based on the success of connection\n     * operation and emits an event notifying the network state change.\n     *\n     * @param silentMode {boolean} if true and connection is successful, then no event is emitted. Otherwise,\n     * events are emitted for network status change.\n     * @returns {*} a promise\n     */\n    private tryToConnect(silentMode = false): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.isServiceAvailable(5000).then(() => {\n                if (networkState.isServiceAvailable && this._autoConnect) {\n                    networkState.isConnecting = true;\n                    if (!silentMode) {\n                        this.checkForNetworkStateChange();\n                    }\n                    setTimeout(() => {\n                        networkState.isConnecting = false;\n                        networkState.isConnected = true;\n                        StorageService.setItem(IS_CONNECTED_KEY, '' + true);\n                        if (!silentMode) {\n                            this.checkForNetworkStateChange();\n                        }\n                        resolve(true);\n                    }, silentMode ? 0 : 5000);\n                } else {\n                    networkState.isConnecting = false;\n                    networkState.isConnected = false;\n                    StorageService.setItem(IS_CONNECTED_KEY, '' + false);\n                    reject();\n                    this.checkForNetworkStateChange();\n                }\n            });\n        });\n    }\n\n    private tryToDisconnect(): Promise<boolean> {\n        networkState.isConnected = false;\n        networkState.isConnecting = false;\n        this.checkForNetworkStateChange();\n        StorageService.setItem(IS_CONNECTED_KEY, '' + networkState.isConnected);\n        return Promise.resolve(networkState.isConnected);\n    }\n}\n\nexport default new NetworkService();"],"mappings":"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"}