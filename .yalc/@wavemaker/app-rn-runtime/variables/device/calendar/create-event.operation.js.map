{"version":3,"names":["isDate","isString","moment","getDateObj","value","isNaN","parseInt","isValid","undefined","dateObj","Date","format","valueOf","getDay","CreateEventOperation","constructor","calendar","invoke","params","createEvent"],"sources":["create-event.operation.tsx"],"sourcesContent":["import { Operation, Output } from '../operation.provider';\nimport { isDate, isString } from 'lodash';\nimport moment from 'moment';\nimport { CalendarInput, CalendarService } from \"@wavemaker/app-rn-runtime/core/device/calendar-service\";\n\nexport interface CreateEventOutput extends Output {\n  dataValue: string;\n}\n\n/**\n * method to get the date object from the input received\n */\nexport const getDateObj = (value: any): any => {\n\n  /*if the value is a date object, no need to covert it*/\n  if (isDate(value)) {\n    return value;\n  }\n\n  /*if the value is a timestamp string, convert it to a number*/\n  if (!isNaN(value)) {\n    value = parseInt(value, 10);\n  }\n\n  if (!moment(value).isValid() || value === '' || value === null || value === undefined) {\n    return undefined;\n  }\n  let dateObj = new Date(value);\n  /**\n   * if date value is string \"20-05-2019\" then new Date(value) return 20May2019 with current time in India,\n   * whereas this will return 19May2019 with time lagging for few hours.\n   * This is because it returns UTC time i.e. Coordinated Universal Time (UTC).\n   * To create date in local time use moment\n   */\n  if (isString(value)) {\n    /*\n     * If selected locale is Arabic, moment(value).format() is giving date in Arabic language\n     * (Ex: If date value is \"1990-11-23\" and moment(value).format() is \"١٩٩٠-١١-٢٣T٠٠:٠٠:٠٠+٠٥:٣٠\")\n     * and new Date(moment(value).format()) is giving Invalid Date. So frst converting it to timestamp value.\n    */\n    dateObj = new Date(moment(moment(value).format()).valueOf());\n  }\n\n  if (isNaN(dateObj.getDay())) {\n    return new Date();\n  }\n  return dateObj;\n};\n\nexport class CreateEventOperation implements Operation {\n  constructor(private calendar: CalendarService) {}\n\n  public invoke(params: CalendarInput): Promise<CreateEventOutput> {\n    return this.calendar.createEvent(params);\n  }\n}\n"],"mappings":"AACA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,QAAQ;AACzC,OAAOC,MAAM,MAAM,QAAQ;AAO3B;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAU,IAAU;EAE7C;EACA,IAAIJ,MAAM,CAACI,KAAK,CAAC,EAAE;IACjB,OAAOA,KAAK;EACd;;EAEA;EACA,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC,EAAE;IACjBA,KAAK,GAAGE,QAAQ,CAACF,KAAK,EAAE,EAAE,CAAC;EAC7B;EAEA,IAAI,CAACF,MAAM,CAACE,KAAK,CAAC,CAACG,OAAO,CAAC,CAAC,IAAIH,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKI,SAAS,EAAE;IACrF,OAAOA,SAAS;EAClB;EACA,IAAIC,OAAO,GAAG,IAAIC,IAAI,CAACN,KAAK,CAAC;EAC7B;AACF;AACA;AACA;AACA;AACA;EACE,IAAIH,QAAQ,CAACG,KAAK,CAAC,EAAE;IACnB;AACJ;AACA;AACA;AACA;IACIK,OAAO,GAAG,IAAIC,IAAI,CAACR,MAAM,CAACA,MAAM,CAACE,KAAK,CAAC,CAACO,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;EAC9D;EAEA,IAAIP,KAAK,CAACI,OAAO,CAACI,MAAM,CAAC,CAAC,CAAC,EAAE;IAC3B,OAAO,IAAIH,IAAI,CAAC,CAAC;EACnB;EACA,OAAOD,OAAO;AAChB,CAAC;AAED,OAAO,MAAMK,oBAAoB,CAAsB;EACrDC,WAAWA,CAASC,QAAyB,EAAE;IAAA,KAA3BA,QAAyB,GAAzBA,QAAyB;EAAG;EAEzCC,MAAMA,CAACC,MAAqB,EAA8B;IAC/D,OAAO,IAAI,CAACF,QAAQ,CAACG,WAAW,CAACD,MAAM,CAAC;EAC1C;AACF"}