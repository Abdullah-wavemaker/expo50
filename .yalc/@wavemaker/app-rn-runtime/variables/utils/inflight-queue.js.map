{"version":3,"names":["InflightQueue","constructor","_defineProperty","Map","addToQueue","variable","param2","requestsQueue","has","get","push","processes","resolve","reject","active","set","rejectProcess","process","clear","delete","nextProcess","length","config","inFlightBehavior","i","splice","submit","Promise","$queue"],"sources":["inflight-queue.ts"],"sourcesContent":["class InflightQueue {\n  requestsQueue = new Map();\n\n  /**\n   * pushes the process against a variable in its queue\n   * @param variable\n   * @param {{resolve: (value?: any) => void; reject: (reason?: any) => void}} param2\n   * the resolve callback will be called on\n   */\n  private addToQueue(variable: any, param2: {resolve: (value?: (any)) => void; reject: (reason?: any) => void}) {\n    if (this.requestsQueue.has(variable)) {\n      this.requestsQueue.get(variable).push(param2);\n    } else {\n      const processes = [];\n      processes.push({resolve: param2.resolve, reject: param2.reject, active: false});\n      this.requestsQueue.set(variable, processes);\n    }\n  }\n\n  /**\n   * Calls the reject method against the passed process\n   * @param process\n   */\n  private rejectProcess(process: any) {\n    process.reject('PROCESS_REJECTED_IN_QUEUE');\n  }\n\n  /**\n   * clears the queue against a variable\n   * @param variable\n   */\n  public clear(variable: any) {\n    this.requestsQueue.delete(variable);\n  }\n\n  /**\n   * executes the n/w calls for a specified variable pushed in its respective queue (pushed while it was inFlight)\n   * @param variable\n   */\n  process(variable: any) {\n    const processes: [any] = this.requestsQueue.get(variable);\n    let nextProcess;\n\n    // process request queue for the variable only if it is not empty\n    if (!processes || !processes.length) {\n      this.clear(variable);\n      return;\n    }\n\n    // If only one item in queue\n    if (processes.length === 1) {\n      nextProcess = processes[0];\n      if (nextProcess.active) {\n        this.clear(variable);\n      } else {\n        nextProcess.active = true;\n        nextProcess.resolve();\n      }\n      return;\n    }\n\n    switch (variable.config.inFlightBehavior) {\n      case 'executeLast':\n        for (let i = 0; i < processes.length - 2; i++) {\n          this.rejectProcess(processes[i]);\n        }\n        processes.splice(0, processes.length - 1);\n        this.process(variable);\n        break;\n      case 'executeAll':\n        nextProcess = processes.splice(0, 1)[0];\n        if (nextProcess.active) {\n          nextProcess = processes.splice(0, 1)[0];\n        }\n        nextProcess.active = true;\n        nextProcess.resolve();\n        break;\n      default:\n        for (let i = 0; i < processes.length - 1; i++) {\n          this.rejectProcess(processes[i]);\n        }\n        this.clear(variable);\n        break;\n    }\n  }\n\n  /**\n   * initializes the queue against a variable and makes the first process call\n   * If already initialized and a process in queue is in progress, the queue is not processed.\n   * To process the next item in the queue, the process method has to be called from the caller.\n   * @param variable\n   * @returns {Promise<any>}\n   */\n  submit(variable: any) {\n    return new Promise((resolve, reject) => {\n      this.addToQueue(variable, {resolve: resolve, reject: reject});\n\n      if (this.requestsQueue.get(variable).length === 1) {\n        this.process(variable);\n      }\n    });\n  }\n}\n\nexport const $queue = new InflightQueue();\n"],"mappings":"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"}