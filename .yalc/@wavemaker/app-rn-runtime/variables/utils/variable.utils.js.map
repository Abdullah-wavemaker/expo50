{"version":3,"names":["forEach","get","isNumber","isObject","isEqual","omit","keys","_setInput","targetObj","key","val","options","lastKey","paramObj","type","parseInt","indexOf","split","pop","findValueOf","join","paramVal","paramKey","obj","create","parts","skipProcessing","part","length","subParts","match","subPart","shift","push","undefined","_key","tempObj","getValidJSON","value","content","parsedIntValue","isNaN","JSON","parse","e","parseErrors","errors","errMsg","error","errorDetails","i","parseError","errorObj","message","replace","parameters","template","map","regEx","isPageable","pageable","first","last","number","numberOfElements","size","sort","totalElements","totalPages","paginatedObj"],"sources":["variable.utils.ts"],"sourcesContent":["import { forEach, get, isNumber, isObject, isEqual, omit, keys } from \"lodash\";\n/**\n * sets the value against passed key on the \"inputFields\" object in the variable\n * @param targetObj: the object in which the key, value is to be set\n * @param variable\n * @param key: can be:\n *  - a string e.g. \"username\"\n *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n * @param val\n * - if key is string, the value against it (for that data type)\n * - if key is object, not required\n * @param options\n * @returns {any}\n */\n\nexport const _setInput = (targetObj: any, key: any, val: any, options?: any) => {\n  targetObj = targetObj || {};\n  let keys,\n    lastKey,\n    paramObj: any = {};\n\n  // content type check\n  if (isObject(options)) {\n    // @ts-ignore\n    switch (options.type) {\n      case 'file':\n        //val = getBlob(val, options.contentType);\n        break;\n      case 'number':\n        val = isNumber(val) ? val : parseInt(val, 10);\n        break;\n    }\n  }\n\n  if (isObject(key)) {\n    // check if the passed parameter is an object itself\n    paramObj = key;\n  } else if (key.indexOf('.') > -1) {\n    // check for '.' in key e.g. 'employee.department'\n    keys = key.split('.');\n    lastKey = keys.pop();\n    // Finding the object based on the key\n    targetObj = findValueOf(targetObj, keys.join('.'), true);\n    key = lastKey;\n    paramObj[key] = val;\n  } else {\n    paramObj[key] = val;\n  }\n\n  forEach(paramObj, function (paramVal, paramKey) {\n    targetObj[paramKey] = paramVal;\n  });\n  return targetObj;\n}\n\n/*\n * Util method to find the value of a key in the object\n * if key not found and create is true, an object is created against that node\n * Examples:\n * var a = {\n *  b: {\n *      c : {\n *          d: 'test'\n *      }\n *  }\n * }\n * Utils.findValue(a, 'b.c.d') --> 'test'\n * Utils.findValue(a, 'b.c') --> {d: 'test'}\n * Utils.findValue(a, 'e') --> undefined\n * Utils.findValue(a, 'e', true) --> {} and a will become:\n * {\n *   b: {\n *      c : {\n *          d: 'test'\n *      }\n *  },\n *  e: {\n *  }\n * }\n */\nexport const findValueOf = (obj: any, key: any, create?: any) => {\n\n  if (!obj || !key) {\n    return;\n  }\n\n  if (!create) {\n    return get(obj, key);\n  }\n\n  const parts = key.split('.'),\n    keys: any = [];\n\n  let skipProcessing;\n\n  // @ts-ignore\n  parts.forEach((part: any) => {\n    if (!parts.length) { // if the part of a key is not valid, skip the processing.\n      skipProcessing = true;\n      return false;\n    }\n\n    const subParts = part.match(/\\w+/g);\n    let subPart;\n\n    while (subParts.length) {\n      subPart = subParts.shift();\n      keys.push({ 'key': subPart, 'value': subParts.length ? [] : {} }); // determine whether to create an array or an object\n    }\n  });\n\n  if (skipProcessing) {\n    return undefined;\n  }\n\n  keys.forEach((_key: any) => {\n    let tempObj = obj[_key.key];\n    if (!isObject(tempObj)) {\n      tempObj = getValidJSON(tempObj);\n      if (!tempObj) {\n        tempObj = _key.value;\n      }\n    }\n    obj[_key.key] = tempObj;\n    obj = tempObj;\n  });\n\n  return obj;\n};\n\nexport const getValidJSON = (content: any) => {\n  if (!content) {\n    return undefined;\n  }\n  try {\n    const parsedIntValue = parseInt(content, 10);\n    /*obtaining json from editor content string*/\n    return isObject(content) || !isNaN(parsedIntValue) ? content : JSON.parse(content);\n  } catch (e) {\n    /*terminating execution if new variable object is not valid json.*/\n    return undefined;\n  }\n}\n\nexport const parseErrors = (errors: any) => {\n  let errMsg = '';\n  if (errors && errors.error && errors.error.length) {\n      errors.error.forEach((errorDetails: any, i: number) => {\n          errMsg += parseError(errorDetails) + (i > 0 ? '\\n' : '');\n      });\n  }\n  return errMsg;\n}\n\nexport const parseError = (errorObj: any) => {\n  let errMsg;\n  errMsg = errorObj.message ? replace(errorObj.message, errorObj.parameters, true) : ((errorObj.parameters && errorObj.parameters[0]) || '');\n  return errMsg;\n}\n\n/*\n * Util method to replace patterns in string with object keys or array values\n * Examples:\n * Utils.replace('Hello, ${first} ${last} !', {first: 'wavemaker', last: 'ng'}) --> Hello, wavemaker ng\n * Utils.replace('Hello, ${0} ${1} !', ['wavemaker','ng']) --> Hello, wavemaker ng\n * Examples if parseError is true:\n * Utils.replace('Hello, {0} {1} !', ['wavemaker','ng']) --> Hello, wavemaker ng\n */\nexport const replace = (template: any, map: any, parseError?: boolean) => {\n  let regEx = /\\$\\{([^\\}]+)\\}/g;\n  if (!template) {\n      return;\n  }\n  if (parseError) {\n      regEx = /\\{([^\\}]+)\\}/g;\n  }\n\n  return template.replace(regEx, function (match: any, key: any) {\n      return get(map, key);\n  });\n};\n\n/*Function to check whether the specified object is a pageable object or not.*/\nexport const isPageable = (obj: any): boolean => {\n  const pageable = {\n    content: [],\n    first: true,\n    last: true,\n    number: 0,\n    numberOfElements: 10,\n    size: 20,\n    sort: null,\n    totalElements: 10,\n    totalPages: 1\n  };\n  // paginated object may or may not contain 'empty' property. In either case, Pageable should return as true.\n  const paginatedObj = omit(obj, 'empty');\n  return isEqual(keys(pageable), keys(paginatedObj).sort());\n};\n"],"mappings":"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"}