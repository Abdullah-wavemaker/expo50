{"version":3,"names":["includes","intersection","isNaN","isFinite","toArray","isNil","BaseComponent","BaseComponentState","DEFAULT_CLASS","Platform","countDecimalDigits","validateField","BaseNumberState","constructor","arguments","_defineProperty","BaseNumberComponent","props","defaultClass","length","undefined","defaultProps","defaultState","DECIMAL","GROUP","onChange","event","state","updateon","updateDatavalue","target","value","focus","_this$widgetRef","widgetRef","validateOnDevice","type","_value$match","isCurrencyField","isValidText","test","Number","match","onChangeText","isValidTextOnDevice","decimalPlacesInNumber","decimalPlaces","updateState","textValue","validate","invokeChange","e","OS","cursor","selectionStart","setState","validationObj","isValid","errorType","handleValidation","regexp","condition","RegExp","parseNumber","val","parts","split","NaN","number","join","decimal","sum","parseFloat","toFixed","Object","is","source","model","toString","oldValue","datavalue","validNumber","isValidNumber","invokeEventCallback","proxy","onFieldChange","onBlur","newVal","setTimeout","triggerValidation","oldVal","onFocus","countDecimals","decimalValue","validateInputEntry","$event","ctrlKey","key","validity","inputValue","step","preventDefault","getValueInRange","minvalue","maxvalue","required","isInteger","resetValidations","onPropertyChange","name","$new","$old","isDefault","bind"],"sources":["basenumber.component.ts"],"sourcesContent":["import { includes, intersection, isNaN, isFinite, toArray, isNil } from 'lodash';\nimport BaseNumberProps from '@wavemaker/app-rn-runtime/components/input/basenumber/basenumber.props';\nimport { BaseComponent, BaseComponentState } from \"@wavemaker/app-rn-runtime/core/base.component\";\nimport { BaseNumberStyles } from '@wavemaker/app-rn-runtime/components/input/basenumber/basenumber.styles';\nimport { DEFAULT_CLASS } from \"@wavemaker/app-rn-runtime/components/navigation/basenav/basenav.styles\";\nimport { Platform, TextInput } from 'react-native';\nimport { countDecimalDigits, validateField } from '@wavemaker/app-rn-runtime/core/utils';\n\nexport class BaseNumberState <T extends BaseNumberProps> extends BaseComponentState<T> {\n  isValid: boolean = true;\n  textValue: string = '';\n  isDefault = false;\n  errorType = '';\n}\n\nexport abstract class BaseNumberComponent< T extends BaseNumberProps, S extends BaseNumberState<T>, L extends BaseNumberStyles> extends BaseComponent<T, S, L> {\n  private DECIMAL;\n  private GROUP;\n  public widgetRef: TextInput | null = null;\n  private cursor: any = 0;\n  constructor(props: T, public defaultClass: string = DEFAULT_CLASS, defaultProps?: T, defaultState?: S) {\n    super(props, defaultClass, defaultProps, defaultState);\n    this.DECIMAL = '.';\n    this.GROUP = ',';\n  }\n\n  onChange(event: any) {\n    if (this.state.props.updateon === 'default') {\n      this.updateDatavalue(event.target.value, event);\n    }\n  }\n\n  focus() {\n    this?.widgetRef?.focus();\n  }\n\n  validateOnDevice(value: string, type: 'number' | 'currency') {\n    const isCurrencyField = type === 'currency';\n    let isValidText = true;\n\n    // * no alphabets except E, may contain E only once\n    if (/[a-df-zA-DF-Z]/.test(value) || !/^[^eE]*[eE]?[^eE]*$/.test(value)) {\n      isValidText = false;\n    }\n\n    // * currency only: check for negative number\n    if (isCurrencyField && (Number(value) < 0 || /-/g.test(value))) {\n      isValidText = false;\n    }\n\n    // * number only: not more than one minus and doesn't end with minus (-)\n    if (!isCurrencyField && (Number(value.match(/-/g)?.length) > 1) || /\\w-/.test(value)) {\n      isValidText = false;\n    }\n\n    // * check for more than one decimal point\n    if (/^\\d*\\.\\d*\\..*$/.test(value)) {\n      isValidText = false;\n    }\n\n    // * check for spaces and comma\n    if (/[\\s,]/.test(value)) {\n      isValidText = false;\n    }\n\n    return isValidText;\n  }\n\n  onChangeText(value: string, type: 'number' | 'currency') {\n    const isValidTextOnDevice = this.validateOnDevice(value, type);\n    if (!isValidTextOnDevice) {\n      return;\n    }\n\n    const decimalPlacesInNumber = countDecimalDigits(value);\n\n    if (this.props.decimalPlaces < decimalPlacesInNumber) {\n      return;\n    }\n\n    this.updateState({\n        textValue: value\n      } as S, () => {\n        if (this.state.props.updateon === 'default') {\n          this.validate(value);\n          this.updateDatavalue(value, null);\n        }\n      }\n    );\n  }\n\n  invokeChange(e: any) {\n    if (Platform.OS === 'web') {\n      this.cursor = e.target.selectionStart;\n      this.setState({ textValue: e.target.value });\n    }\n  }\n\n  validate(value: any) {\n    const validationObj = validateField(this.state.props, value);\n    this.updateState({\n      isValid: validationObj.isValid,\n      errorType: validationObj.errorType\n    } as S);\n\n  }\n\n  handleValidation(value: any) {\n    const props = this.state.props;\n    if (props.regexp) {\n      const condition = new RegExp(props.regexp, 'g');\n      return condition.test(value);\n    }\n    return true;\n  }\n\n  /**\n   * Method parses the Localized number(string) to a valid number.\n   * if the string dose not result to a valid number then returns NaN.\n   * @param {string} val Localized number.\n   * @returns {number}\n   */\n  private parseNumber(val: string): any {\n    // splits string into two parts. decimal and number.\n    const parts = val.split(this.DECIMAL);\n    if (!parts.length) {\n      return;\n    }\n    if (parts.length > 2) {\n      return NaN;\n    }\n    // If number have decimal point and not have a decimal value then return.\n    if (parts[1] === '') {\n      return NaN;\n    }\n    // replaces all group separators form the number.\n    const number = Number(parts[0].split(this.GROUP).join(''));\n    const decimal = Number(`0.${parts[1] || 0}`);\n    if (Number.isNaN(number) || Number.isNaN(decimal)) {\n      return NaN;\n    }\n    const sum = parts.length > 1 ? parseFloat((number + decimal).toFixed(parts[1].length)) : number + decimal;\n    // if the number is negative then calculate the number as number - decimal\n    // Ex: number = -123 and decimal = 0.45 then number - decimal = -123-045 = -123.45\n    // If entered number is -0.1 to -0.9 then the number is -0 and decimal is 0.1 to 0.9. Now calaculate the number as number-decimal\n    // Ex: number = -0 and decimal = 0.1 then number-decimal = -0-0.1 = -0.1\n    if (number === 0) {\n      return Object.is(0, number) ? sum : number - decimal;\n    }\n    return number > 0 ? sum : number - decimal;\n  }\n\n  updateDatavalue(value: any, event?: any, source?: any) {\n    const model = value && this.parseNumber(value.toString());\n    const props = this.state.props;\n    const oldValue = props.datavalue;\n    if (value === oldValue) {\n      return;\n    }\n    const validNumber = this.isValidNumber(model) || value == oldValue + '.';\n    if (!validNumber) {\n      this.invokeEventCallback('onError', [ event, this.proxy, value, oldValue ]);\n      return;\n    }\n\n    this.updateState({\n      props: {\n        datavalue: model || Number(value)\n      }\n    } as S, () => {\n      !this.props.onFieldChange && value !== oldValue && this.invokeEventCallback('onChange', [event, this.proxy, model, oldValue]);\n      if (source === 'blur') {\n        this.invokeEventCallback('onBlur', [event, this.proxy]);\n      }\n    });\n  }\n\n  onBlur(event: any) {\n    let newVal = event.target.value || this.state.textValue;\n    this.validate(newVal);\n    if (newVal === '' || newVal == undefined) {\n      setTimeout(() => {\n        this.props.triggerValidation && this.props.triggerValidation();\n      },10)\n    }\n    if (this.state.props.updateon === 'blur') {\n      let oldVal = this.state.props.datavalue || '';\n      if (oldVal !== newVal) {\n        this.updateDatavalue(newVal, event, 'blur');\n      } else {\n        this.invokeEventCallback('onBlur', [event, this.proxy]);\n      }\n    }\n  }\n\n  onFocus(event: any) {\n    this.invokeEventCallback('onFocus', [ event, this.proxy]);\n  }\n\n  /**\n   * returns the number of decimal places a number have.\n   * @param value: number\n   * @returns {number}\n   */\n  private countDecimals(value: any) {\n    if (value && ((value % 1) !== 0)) {\n      const decimalValue = value.toString().split('.')[1];\n      return decimalValue && decimalValue.length;\n    }\n    return 0;\n  }\n\n  public validateInputEntry($event: any) {\n    const props = this.state.props;\n\n    // allow actions if control key is pressed or if backspace is pressed. (for Mozilla).\n    if ($event.ctrlKey || includes(['Backspace', 'ArrowRight', 'ArrowLeft', 'Tab', 'Enter', 'Delete'], $event.key)) {\n      return;\n    }\n\n    const validity = new RegExp(`^[\\\\d\\\\s-,.e+${this.GROUP}${this.DECIMAL}]$`, 'i');\n    const inputValue = $event.target.value;\n    // validates entering of decimal values only when user provides decimal limit(i.e step contains decimal values).\n    if (inputValue && this.countDecimals(props.step) && (this.countDecimals(inputValue) >= this.countDecimals(props.step))) {\n      $event.preventDefault();\n    }\n    // validates if user entered an invalid character.\n    if (!validity.test($event.key)) {\n      $event.preventDefault();\n    }\n    // a decimal value can be entered only once in the input.\n    if (includes(inputValue, this.DECIMAL) && $event.key === this.DECIMAL) {\n      $event.preventDefault();\n    }\n    // 'e' can be entered only once in the input.\n    if (intersection(toArray(inputValue), ['e', 'E']).length && includes('eE', $event.key)) {\n      $event.preventDefault();\n    }\n    if ((includes(inputValue, '+') || includes(inputValue, '-')) && ($event.key === '+' || $event.key === '-')) {\n      $event.preventDefault();\n    }\n    this.invokeEventCallback('onKeypress', [ $event, this.proxy]);\n  }\n\n  /**\n   * returns a valid number by validating the minimum and maximum values.\n   * @param {number} value\n   * @returns {number}\n   */\n  private getValueInRange(value: number): number {\n    const props = this.state.props;\n    if (!isNil(value) && !isNaN(props.minvalue) && value < props.minvalue) {\n      this.updateState({ errorType: 'minvalue'} as S);\n      return props.minvalue;\n    }\n    if (!isNil(value) && !isNaN(props.maxvalue) && value > props.maxvalue) {\n      this.updateState({ errorType: 'maxvalue'} as S);\n      return props.maxvalue;\n    }\n    return value;\n  }\n\n  /**\n   * Adds validations for the number before updating the widget model. like validating min and max value for the widget.\n   * @param {number} val number to be validated\n   * @returns {number}\n   */\n  private isValidNumber(val: number): boolean {\n    const props = this.state.props;\n\n    //empty number widget should not show validation error when required is false\n    // @ts-ignore\n    if (this.state.props.required === false && val === '') {\n      return true;\n    }\n    // id number is infinite then consider it as invalid value\n    if (isNaN(val) || !isFinite(val) || (!Number.isInteger(props.step) &&\n      this.countDecimals(val) > this.countDecimals(props.step))) {\n      this.updateState({\n        isValid: false,\n      } as S);\n      return false;\n    }\n    if (val !== this.getValueInRange(val)) {\n      this.updateState({\n        isValid: false,\n      } as S);\n      return true;\n    }\n    this.resetValidations();\n    return true;\n  }\n\n  // resets all the flags related to the widget's validation.\n  protected resetValidations() {\n    this.updateState({\n      isValid: true,\n    } as S);\n  }\n\n  onPropertyChange(name: string, $new: any, $old: any) {\n    switch (name) {\n      case 'minvalue':\n      case 'maxvalue':\n        if ($new|| $old) {\n          this.isValidNumber($new);\n        }\n        break;\n      case 'datavalue':\n        this.updateState({\n          textValue: $new,\n        } as S);\n        const isDefault = this.state.isDefault;\n        if (isDefault) {\n          this.updateState({ isDefault: false } as S, this.props.onFieldChange && this.props.onFieldChange.bind(this, 'datavalue', $new, $old, isDefault));\n        } else {\n          this.props.onFieldChange && this.props.onFieldChange('datavalue', $new, $old, isDefault);\n        }\n    }\n  }\n}\n"],"mappings":"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"}