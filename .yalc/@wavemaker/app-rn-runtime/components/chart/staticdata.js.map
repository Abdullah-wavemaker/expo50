{"version":3,"names":["_","dataTypeJSON","SAMPLE_DATA1","SAMPLE_DATA","SAMPLE_DATA2","chartTypes","isPieChart","type","isLineChart","isBarChart","isDonutChart","isBubbleChart","isAreaChart","isColumnChart","isPieType","isChartDataJSON","includes","constructSampleData","dataType","yaxisLength","shape","first_series","second_series","third_series","first_series_array","second_series_array","third_series_array","data","values","key","group1","group2","group3","group4","getChartType","widgetContext","getSampleData","getDataType","split","yaxisdatakey","length","Error"],"sources":["staticdata.tsx"],"sourcesContent":["import _ from \"lodash\";\n\nconst dataTypeJSON = ['Column', 'Line', 'Pie', 'Bar', 'Donut', 'Bubble']\n\nconst SAMPLE_DATA1 = {\n  'group1' : 'Europe',\n  'group2' : 'Asia',\n  'group3' : 'America',\n  'group4' : 'Australia'\n}\n\nconst SAMPLE_DATA = {\n    'group1' : '01/01/2001',\n    'group2' : '01/01/2002',\n    'group3' : '01/01/2003',\n};\nconst SAMPLE_DATA2 = {\n  'group1' : '78.6',\n  'group2' : '79',\n  'group3' : '80',\n  'group4' : '80.66'\n};\nexport const chartTypes = ['Column', 'Line', 'Area', 'Cumulative Line', 'Bar', 'Pie', 'Donut', 'Bubble']\n\nexport const isPieChart = (type: string) => type === 'Pie';\n\n// returns true if chart type is line\nexport const isLineChart = (type: string) => type === 'Line';\n\n// returns true if chart type is bar\nexport const isBarChart = (type: string) => type === 'Bar';\n\n// returns true if chart type is donut\nexport const isDonutChart = (type: string) => type === 'Donut';\n\n// returns true if chart type is bubble\nexport const isBubbleChart = (type: string) => type === 'Bubble';\n\nexport const isAreaChart = (type: string) => type === 'Area';\n\n// returns true if chart type is column\nexport const isColumnChart = (type: string) => type === 'Column';\n\nexport const isPieType = (type: string) => isPieChart(type) || isDonutChart(type);\n\n// The format of chart data is array of json objects in case of the following types of chart\nexport const isChartDataJSON = (type: any) => _.includes(dataTypeJSON, type) || !_.includes(chartTypes, type);\n\n\nexport const constructSampleData = (dataType: any, yaxisLength: any, shape: string) => {\n  let first_series = [],\n      second_series = [],\n      third_series = [],\n      first_series_array = [],\n      second_series_array = [],\n      third_series_array = [],\n      data: { values?:  { x: string | number; y?: string | number; size?: number; shape?: any; }[]  | number[][]; key: any; }[] | { x: any; y?: number;  }[] = [];\n  switch (dataType) {\n    case 'jsonFormat':\n      first_series = [\n          {'x': '01/01/2001', 'y': 4000000},\n          {'x': '01/01/2002', 'y': 1000000},\n          {'x': '01/01/2003', 'y': 5000000}\n      ];\n      second_series = [\n          {'x': '01/01/2001', 'y': 3000000},\n          {'x': '01/01/2002', 'y': 4000000},\n          {'x': '01/01/2003', 'y': 7000000}\n      ];\n      third_series = [\n          {'x': '01/01/2001', 'y': 2000000},\n          {'x': '01/01/2002', 'y': 8000000},\n          {'x': '01/01/2003', 'y': 6000000}\n      ];\n      data[0] = {\n          values: first_series,\n          key: SAMPLE_DATA.group1\n      };\n      if (yaxisLength >= 2) {\n          data[1] = {\n              values: second_series,\n              key: SAMPLE_DATA.group2\n          };\n      }\n      if (yaxisLength >= 3) {\n          data[2] = {\n              values: third_series,\n              key: SAMPLE_DATA.group3\n          };\n      }\n      break;\n    case 'arrayFormat':\n      first_series_array = [\n          [1, 4000000],\n          [2, 1000000],\n          [3, 5000000]\n      ];\n      second_series_array = [\n          [1, 3000000],\n          [2, 4000000],\n          [3, 7000000]\n      ];\n      third_series_array = [\n          [1, 2000000],\n          [2, 8000000],\n          [3, 6000000]\n      ];\n      data[0] = {\n          values: first_series_array,\n          key: SAMPLE_DATA.group1\n      };\n      if (yaxisLength >= 2) {\n          data[1] = {\n              values: second_series_array,\n              key: SAMPLE_DATA.group2\n          };\n      }\n      if (yaxisLength >= 3) {\n          data[2] = {\n              values: third_series_array,\n              key: SAMPLE_DATA.group3\n          };\n      }\n            break;\n            case 'columnChartFormat':\n              data = [\n                {'x': SAMPLE_DATA.group1, 'y': 3}\n            ];\n            break;\n            case 'barChartFormat':\n              data = [\n                {'x': SAMPLE_DATA.group1, 'y': 2000000},\n                {'x': SAMPLE_DATA.group2, 'y': 1000000},\n                {'x': SAMPLE_DATA.group3, 'y': 3000000}\n            ];\n            break;\n            case 'lineChartFormat':\n              data = [\n                {'x': SAMPLE_DATA1.group1, 'y': 2},\n                {'x': SAMPLE_DATA1.group2, 'y': 0},\n                {'x': SAMPLE_DATA1.group3, 'y': 3}\n            ];\n              break;\n              case 'bubbleFormat':\n                // shape = shape === 'random' ?  shapes[Math.floor(Math.random() * shapes.length)] : shape;\n                data = [\n                  {'x': SAMPLE_DATA2.group1, 'y': 1000000},\n                  {'x': SAMPLE_DATA2.group2, 'y': 2000000},\n                  {'x': SAMPLE_DATA2.group3, 'y': 3000000},\n                  {'x': SAMPLE_DATA2.group4, 'y': 4000000}\n              ];\n              break;\n                case 'pieChartFormat':\n                  data = [\n                      {'x': SAMPLE_DATA1.group1, 'y': 1000000},\n                      {'x': SAMPLE_DATA1.group2, 'y': 2000000},\n                      {'x': SAMPLE_DATA1.group3, 'y': 3000000},\n                      {'x': SAMPLE_DATA1.group4, 'y': 4000000}\n                  ];\n                  break;\n    \n  }\n  return data;\n\n};\n\nexport const getChartType = (widgetContext: { type: any; }) => {\n  const type = widgetContext.type;\n  if (isLineChart(type)) {\n      return 'lineChartFormat';\n  }\n  if (isAreaChart(type)) {\n    return 'lineChartFormat'; \n  }\n  if (isBarChart(type)) {\n    return 'barChartFormat'; \n  }\n  if (isColumnChart(type)) {\n    return 'columnChartFormat'; \n  }\n  if (isPieChart(type)) {\n      return 'pieChartFormat';\n  }\n  if (isBubbleChart(type)) {\n      return 'bubbleFormat';\n  }\n  if (isDonutChart(type)) {\n    return 'pieChartFormat';\n}\n  return isChartDataJSON(type) ? 'jsonFormat' : 'arrayFormat';\n};\n\n// Sample data to populate when no data is bound\nexport const getSampleData = (widgetContext: { yaxisdatakey: any; shape: any; }) => constructSampleData(getDataType(widgetContext), _.split(widgetContext.yaxisdatakey, ',').length, widgetContext.shape);\n\nfunction getDataType(widgetContext: { yaxisdatakey: any; shape: any; }): any {\n  throw new Error(\"Function not implemented.\");\n}\n"],"mappings":"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"}