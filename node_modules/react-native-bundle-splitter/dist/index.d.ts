import * as React from 'react';
import { EnhancedPreLoadable } from './interface';
import { isCached } from './map';
declare const register: <P extends {}>(component: (Pick<{
    require?: import("./interface").RequireLoader | undefined;
    loader?: import("./interface").ImportLoader | undefined;
    name?: string | undefined;
    group?: string | undefined;
    static?: object | undefined;
}, "static" | "name" | "group"> & Required<Pick<{
    require?: import("./interface").RequireLoader | undefined;
    loader?: import("./interface").ImportLoader | undefined;
    name?: string | undefined;
    group?: string | undefined;
    static?: object | undefined;
}, "require">> & Partial<Record<"loader", undefined>> & Partial<EnhancedPreLoadable>) | (Pick<{
    require?: import("./interface").RequireLoader | undefined;
    loader?: import("./interface").ImportLoader | undefined;
    name?: string | undefined;
    group?: string | undefined;
    static?: object | undefined;
}, "static" | "name" | "group"> & Required<Pick<{
    require?: import("./interface").RequireLoader | undefined;
    loader?: import("./interface").ImportLoader | undefined;
    name?: string | undefined;
    group?: string | undefined;
    static?: object | undefined;
}, "loader">> & Partial<Record<"require", undefined>> & Partial<EnhancedPreLoadable>)) => React.ComponentClass<P, any>;
declare const preload: () => {
    component: (name: string) => Promise<any>;
    group: (name: string) => Promise<any[]>;
};
export { register, preload, isCached };
